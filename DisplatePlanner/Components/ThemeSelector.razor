@inject ThemeService ThemeService
@inject ILocalStorageService LocalStorageService
@inject IJSRuntime JS

<button @onclick="ToggleTheme" class="theme-toggle">
    @if (isDarkMode)
    {
        <SunIcon />
    }
    else
    {
        <MoonIcon />
    }
</button>

@code {
    private const string storageThemeKey = "theme";
    private const string darkTheme = "dark";
    private const string whiteTheme = "white";

    private bool isDarkMode;

    protected override async Task OnInitializedAsync()
    {
        var theme = await LocalStorageService.GetItemAsync<string>(storageThemeKey);

        if (theme == null)
        {
            var userPreffersDarkModel = await JS.InvokeAsync<bool>("isDarkMode");
            

            theme = userPreffersDarkModel ? darkTheme : whiteTheme;
        }

        isDarkMode = theme.Equals(darkTheme);
        ThemeService.IsDarkMode = isDarkMode;
    }

    private async Task ToggleTheme()
    {
        isDarkMode = !isDarkMode;
        ThemeService.IsDarkMode = isDarkMode;
        await LocalStorageService.SetItemAsync(storageThemeKey, ThemeService.CurrentTheme);
    }
}

<style>
    .theme-toggle {
        background: none !important;
        align-content:center;
        border: none;
        cursor: pointer;
        color: var(--primary);
        transition: background-color 0.3s ease;
    }

        .theme-toggle:hover {
            color: orange !important
        }
</style>

<script>
        window.isDarkMode = () => {
        return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    };
</script>