@using System.Net.Http.Json
@using DisplatePlanner.Enums
@using DisplatePlanner.Models
@inject HttpClient httpClient

<div class="search-input">
    <input class="search-box" type="text" @bind="searchTerm" @oninput="OnSearchTermChanged" placeholder="plate ID or URL" />
    <button class="add-button" @onclick="Search" disabled="@(!IsValidInput)">Add</button>
</div>
<a class="error-message" hidden="@string.IsNullOrEmpty(errorMessage)" @key="errorMessage">@errorMessage</a>

@code {
    [Parameter]
    public EventCallback<PlateData> PlateAddedEvent { get; set; }

    private string searchTerm = string.Empty;
    private string errorMessage = string.Empty;

    private bool IsValidInput => TryExtractId(out _);

    private bool TryExtractId(out string id)
    {
        id = string.Empty;
        if (string.IsNullOrWhiteSpace(searchTerm)) return false;

        if (System.Text.RegularExpressions.Regex.IsMatch(searchTerm, @"^\d+$"))
        {
            id = searchTerm;
            return true;
        }

        var match = System.Text.RegularExpressions.Regex.Match(searchTerm, @"^(?:https?:\/\/)?(?:www\.)?displate\.com/displate/(\d+)$");
        if (match.Success)
        {
            id = match.Groups[1].Value;
            return true;
        }

        return false;
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private async void Search()
    {
        if (!TryExtractId(out var id)) return;

        errorMessage = string.Empty;

        try
        {
            var response = await httpClient.GetAsync($"https://corsproxy.io/?url=https://sapi.displate.com/artworks/{id}");

            if (!response.IsSuccessStatusCode)
            {
                errorMessage = response.StatusCode == System.Net.HttpStatusCode.NotFound
                    ? "Displate doesn't exist."
                    : "Failed to fetch data.";
                StateHasChanged();
                return;
            }

            var plateResponse = await response.Content.ReadFromJsonAsync<RegularResponse>();

            if (plateResponse?.Data != null)
            {
                await PlateAddedEvent.InvokeAsync(new PlateData(
                    plateResponse.Data.ItemCollectionId,
                    DateTime.Now,
                    plateResponse.Data.Title,
                    plateResponse.Data.ImageUrl,
                    PlateType.Regular,
                    plateResponse.Data.Orientation != "vertical"
                ));
                return;
            }

            errorMessage = "No data found.";
        }
        catch
        {
            errorMessage = "Failed to fetch data. Please try again.";
        }

        StateHasChanged();
    }
}

<style>
    .error-message {
        color: red;
        border-bottom: 1px solid;
    }

    .search-input {
        width:100%;
        display: flex;
        border-top: 1px solid;
        border-bottom: 1px solid;
    }

    .search-box {
        padding:8px;
        width:100%;
        border: 0px;        
    }

        .search-box:focus {
            outline: none;
        }

    .add-button {
        border:0px;
        border-left: 1px solid;
        cursor: pointer;
        transition: 0.2s;
    }

        .add-button:hover {
            border: 0px;
            border-left: 1px solid;
        }

        .add-button:disabled {
            border: 0px;
            border-left: 1px solid;            
            cursor: not-allowed;
        }
</style>
