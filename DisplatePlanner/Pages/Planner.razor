@page "/planner"

@using Blazored.LocalStorage
@using DisplatePlanner.Enums
@using DisplatePlanner.Interfaces
@using DisplatePlanner.Models
@using DisplatePlanner.Services
@using Microsoft.AspNetCore.Components.Web
@using System.Linq

<div class="main-container">
    <div oncontextmenu="return false;" class="grid" id="grid" tabindex="0"
    @onkeydown="OnKeyDown" @onkeydown:preventDefault
    @onwheel="OnZoom"
    @onmousemove="OnMouseMove"
    @onmouseup="OnMouseUp"
    @onmousedown="OnMouseDown" autofocus="true">
        @foreach (var rect in plates)
        {
            <div class="Plate @((SelectedPlates.Contains(rect)) ? "selected" : "")"
                 style="width: @(rect.Width * zoomLevel)px;
                        height: @(rect.Height * zoomLevel)px;
                        top: @(rect.Y * zoomLevel)px;
                        left: @(rect.X * zoomLevel)px;"
            @onclick="(e) => SelectAPlate(e,rect)"
            @onmousedown="(e) => StartDrag(e, rect)" @onmousedown:stopPropagation>
                <div class="PlateContainer" style="@(GetRotationStyle(rect, zoomLevel)) transform: rotate(@($"{rect.Rotation}deg"))">
                    <img loading="lazy" class="img-test" tabindex="-1" src="@rect.ImageUrl" draggable="false" />
                </div>
            </div>
        }

        @if (CurrentState == State.Dragging && AlignmentLines.Any())
        {
            @foreach (var line in AlignmentLines)
            {
                <div class="alignment-line"
                     style="left: @(line.X * zoomLevel)px;
                            top: @(line.Y * zoomLevel)px;
                            width: @((!line.IsVertical ? line.Lenght * zoomLevel : 2))px;
                            height: @((line.IsVertical ? line.Lenght * zoomLevel : 2))px;" />
            }
        }

        @if (CurrentState == State.Selecting)
        {
            <div class="selection-box"
                 style="left: @(Math.Min(selectionBoxStartX, selectionBoxEndX))px;
                        top: @(Math.Min(selectionBoxStartY, selectionBoxEndY))px;
                        width: @(Math.Abs(selectionBoxEndX - selectionBoxStartX))px;
                        height: @(Math.Abs(selectionBoxEndY - selectionBoxStartY))px;"/>
        }
    </div>

    <div class="selection-container">
        <input type="text" @bind="searchTerm" @oninput="FilterPlates" placeholder="Search" class="search-box" />
        <div class="selection-items-container">
            <Virtualize Items="@filteredPlates" Context="plate">
                <div class="selection-item" @onclick="() => AddPlate(plate)">
                    <img loading="lazy" src="@plate.ImageUrl" />
                    <span>@plate.Name</span>
                </div>
            </Virtualize>
        </div>
    </div>
</div>

<script>
    function getScrollPosition(elementId) {
        const element = document.getElementById(elementId);

        return {
            scrollTop: element.scrollTop,
            scrollLeft: element.scrollLeft
        };
    }

    window.myUtils = {
        addZoomPreventingHandler: function (elementId, eventName) {
            const element = document.getElementById(elementId);
            if (element) {
                element.addEventListener(eventName, e => {
                    if (e.ctrlKey) {
                        e.preventDefault();
                    }
                }, { passive: false });
            }
        }
    };
</script>