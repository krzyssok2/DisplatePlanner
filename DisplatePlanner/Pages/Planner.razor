@page "/planner"

@using Blazored.LocalStorage
@using DisplatePlanner.Components
@using DisplatePlanner.Enums
@using DisplatePlanner.Interfaces
@using DisplatePlanner.Models
@using DisplatePlanner.Services
@using Microsoft.AspNetCore.Components.Web
@using System.Linq

<div class="main-container">
    <div oncontextmenu="return false;" class="grid" id="grid" tabindex="0"
    @onkeydown="OnKeyDown" @onkeydown:preventDefault
    @onwheel="OnZoom"
    @onmousemove="OnMouseMove"
    @onmouseup="OnMouseUp"
    @onmousedown="OnMouseDown" autofocus="true">
        <div style="position:absolute;
                    width: @(GridWith * zoomLevel)px;
                    height:@(GridLenght * zoomLevel)px;">
            @foreach (var rect in plates)
            {
                <div class="Plate @((SelectedPlates.Contains(rect)) ? "selected" : "")"
                     style="width: @(rect.Width * zoomLevel)px;
                        height: @(rect.Height * zoomLevel)px;
                        top: @(rect.Y * zoomLevel)px;
                        left: @(rect.X * zoomLevel)px;"
                     @onclick="(e) => SelectAPlate(e,rect)"
                     @onmousedown="(e) => StartDrag(e, rect)" @onmousedown:stopPropagation>
                    <div class="PlateContainer" style="transform: rotate(@($"{rect.Rotation}deg"))">
                        <img loading="lazy" style="@(GetRotationStyle(rect, zoomLevel))" class="plate-image" tabindex="-1" src="@rect.ImageUrl" draggable="false" />
                    </div>
                </div>
            }

            @if (CurrentState == State.Dragging && AlignmentLines.Any())
            {
                @foreach (var line in AlignmentLines)
                {
                    <div class="alignment-line"
                         style="left: @(line.X * zoomLevel)px;
                            top: @(line.Y * zoomLevel)px;
                            width: @((!line.IsVertical ? line.Lenght * zoomLevel : 2))px;
                            height: @((line.IsVertical ? line.Lenght * zoomLevel : 2))px;" />
                }
            }

            @if (CurrentState == State.Selecting)
            {
                <div class="selection-box"
                     style="left: @(SelectionBox.X * zoomLevel)px;
                        top: @(SelectionBox.Y * zoomLevel)px;
                        width: @(SelectionBox.Width * zoomLevel)px;
                        height: @(SelectionBox.Height * zoomLevel)px;" />
            }
    </div>

    </div>

    <div class="plate-search-container">
        <button class="collapse-button" @onclick="() => isSelectionCollapsed = !isSelectionCollapsed">
            @(isSelectionCollapsed ? ">" : "<")
        </button>
        <div class="collapsible-container @(isSelectionCollapsed ? "collapsed" : "expanded")">
            <div class="tab">
                <button @onclick="() => ShowLimited = true" class="@(ShowLimited ? "active" : string.Empty)">Limited</button>
                <button @onclick="() => ShowLimited = false" class="@(!ShowLimited ? "active" : string.Empty)">Regular</button>
            </div>

            <div style="@(ShowLimited ? "" : "display:none")" class="selection-container">
                <LimitedPlateSelection PlateClickedEvent="(plate) => AddPlate(plate)" />
            </div>
            <div style="@(!ShowLimited ? "" : "display:none")" class="selection-container">
                <NormalPlateSelection PlateClickedEvent="(plate) => AddPlate(plate)" />
            </div>
        </div>
    </div>        
</div>

<script>
    function getScrollPosition(elementId) {
        const element = document.getElementById(elementId);

        return {
            scrollTop: element.scrollTop,
            scrollLeft: element.scrollLeft
        };
    }

    window.myUtils = {
        addZoomPreventingHandler: function (elementId, eventName) {
            const element = document.getElementById(elementId);
            if (element) {
                element.addEventListener(eventName, e => {
                    if (e.ctrlKey) {
                        e.preventDefault();
                    }
                }, { passive: false });
            }
        }
    };
</script>